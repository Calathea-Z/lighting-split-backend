// <auto-generated />
using System;
using Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(LightningDbContext))]
    [Migration("20250909034835_Add_Split_Tables")]
    partial class Add_Split_Tables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Models.Owners.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("KeyHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("LastSeenAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("KeyHash")
                        .IsUnique();

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("Api.Models.Owners.OwnerPayoutMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("DisplayLabel")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("HandleOrUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlatformId")
                        .HasColumnType("integer");

                    b.Property<string>("QrImageBlobPath")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("OwnerId", "IsDefault")
                        .IsUnique()
                        .HasFilter("\"IsDefault\" = TRUE");

                    b.ToTable("OwnerPayoutMethods");
                });

            modelBuilder.Entity("Api.Models.PayoutPlatform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("HandlePattern")
                        .HasColumnType("text");

                    b.Property<bool>("IsInstructionsOnly")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("LinkTemplate")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("PrefixToStrip")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("SupportsAmount")
                        .HasColumnType("boolean");

                    b.Property<bool>("SupportsNote")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("PayoutPlatforms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Venmo",
                            HandlePattern = "^[A-Za-z0-9_.]+$",
                            IsInstructionsOnly = false,
                            Key = "venmo",
                            LinkTemplate = "https://account.venmo.com/pay?txn=pay&recipients={handle}&amount={amount}&note={note}",
                            PrefixToStrip = "@",
                            SortOrder = 10,
                            SupportsAmount = true,
                            SupportsNote = true
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "Cash App",
                            HandlePattern = "^[A-Za-z0-9_]+$",
                            IsInstructionsOnly = false,
                            Key = "cashapp",
                            LinkTemplate = "https://cash.app/${handle}?amount={amount}&note={note}",
                            PrefixToStrip = "$",
                            SortOrder = 20,
                            SupportsAmount = true,
                            SupportsNote = true
                        },
                        new
                        {
                            Id = 3,
                            DisplayName = "PayPal.Me",
                            HandlePattern = "^[A-Za-z0-9.]+$",
                            IsInstructionsOnly = false,
                            Key = "paypalme",
                            LinkTemplate = "https://paypal.me/{handle}/{amount}",
                            PrefixToStrip = "paypal.me/",
                            SortOrder = 30,
                            SupportsAmount = true,
                            SupportsNote = false
                        },
                        new
                        {
                            Id = 4,
                            DisplayName = "Zelle",
                            HandlePattern = "(^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$)|(^\\+?1?\\d{10}$)",
                            IsInstructionsOnly = true,
                            Key = "zelle",
                            SortOrder = 40,
                            SupportsAmount = false,
                            SupportsNote = false
                        },
                        new
                        {
                            Id = 5,
                            DisplayName = "Apple Cash",
                            HandlePattern = ".{1,256}",
                            IsInstructionsOnly = true,
                            Key = "applecash",
                            SortOrder = 50,
                            SupportsAmount = false,
                            SupportsNote = false
                        },
                        new
                        {
                            Id = 6,
                            DisplayName = "Custom URL",
                            HandlePattern = "^https://",
                            IsInstructionsOnly = false,
                            Key = "custom",
                            LinkTemplate = "{handle}",
                            SortOrder = 60,
                            SupportsAmount = false,
                            SupportsNote = false
                        });
                });

            modelBuilder.Entity("Api.Models.Receipts.Receipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("BaselineSubtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("BlobContainer")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("BlobName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<decimal?>("ComputedItemsSubtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal?>("Discrepancy")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("IdempotencyKey")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool?>("LlmAccepted")
                        .HasColumnType("boolean");

                    b.Property<bool>("LlmAttempted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("LlmModel")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("NeedsReview")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("OriginalFileUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("OwnerUserId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("ParseError")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime?>("ParsedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("ParsedBy")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("ParserVersion")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("RawText")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("RejectReason")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<decimal?>("SubTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("Tax")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("Tip")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("now()");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("NeedsReview");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("ParsedAt");

                    b.HasIndex("BlobContainer", "BlobName");

                    b.HasIndex("OwnerUserId", "CreatedAt");

                    b.HasIndex("OwnerUserId", "IdempotencyKey")
                        .IsUnique()
                        .HasFilter("\"IdempotencyKey\" IS NOT NULL");

                    b.HasIndex("ParsedBy", "ParsedAt");

                    b.HasIndex("Status", "CreatedAt");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("Api.Models.Receipts.ReceiptItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal?>("Discount")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<bool>("IsSystemGenerated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("LineSubtotal")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal>("LineTotal")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<decimal>("Qty")
                        .HasPrecision(9, 3)
                        .HasColumnType("numeric(9,3)");

                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Tax")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Unit")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("now()");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("ReceiptId", "Position");

                    b.ToTable("ReceiptItems");
                });

            modelBuilder.Entity("Api.Models.Splits.ItemClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("QtyShare")
                        .HasPrecision(9, 3)
                        .HasColumnType("numeric(9,3)");

                    b.Property<Guid>("ReceiptItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SplitSessionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SplitSessionId", "ReceiptItemId", "ParticipantId")
                        .IsUnique();

                    b.ToTable("ItemClaims");
                });

            modelBuilder.Entity("Api.Models.Splits.SplitParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("SplitSessionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SplitSessionId", "SortOrder");

                    b.ToTable("SplitParticipants");
                });

            modelBuilder.Entity("Api.Models.Splits.SplitParticipantResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("DiscountAlloc")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<decimal>("ItemsSubtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SplitResultId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TaxAlloc")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TipAlloc")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("SplitResultId");

                    b.ToTable("SplitParticipantResults");
                });

            modelBuilder.Entity("Api.Models.Splits.SplitResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("SplitSessionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SplitSessionId");

                    b.ToTable("SplitResults");
                });

            modelBuilder.Entity("Api.Models.Splits.SplitSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset?>("FinalizedAt")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("IsFinalized")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShareCode")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("ShareCode")
                        .IsUnique();

                    b.HasIndex("OwnerId", "CreatedAt");

                    b.HasIndex("ReceiptId", "CreatedAt");

                    b.ToTable("SplitSessions");
                });

            modelBuilder.Entity("Api.Models.Owners.OwnerPayoutMethod", b =>
                {
                    b.HasOne("Api.Models.Owners.Owner", "Owner")
                        .WithMany("Methods")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.PayoutPlatform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("Api.Models.Receipts.ReceiptItem", b =>
                {
                    b.HasOne("Api.Models.Receipts.Receipt", "Receipt")
                        .WithMany("Items")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("Api.Models.Splits.ItemClaim", b =>
                {
                    b.HasOne("Api.Models.Splits.SplitSession", "Split")
                        .WithMany("Claims")
                        .HasForeignKey("SplitSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Split");
                });

            modelBuilder.Entity("Api.Models.Splits.SplitParticipant", b =>
                {
                    b.HasOne("Api.Models.Splits.SplitSession", "Split")
                        .WithMany("Participants")
                        .HasForeignKey("SplitSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Split");
                });

            modelBuilder.Entity("Api.Models.Splits.SplitParticipantResult", b =>
                {
                    b.HasOne("Api.Models.Splits.SplitResult", "Result")
                        .WithMany("Participants")
                        .HasForeignKey("SplitResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Result");
                });

            modelBuilder.Entity("Api.Models.Splits.SplitResult", b =>
                {
                    b.HasOne("Api.Models.Splits.SplitSession", "Split")
                        .WithMany()
                        .HasForeignKey("SplitSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Split");
                });

            modelBuilder.Entity("Api.Models.Splits.SplitSession", b =>
                {
                    b.HasOne("Api.Models.Owners.Owner", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.Receipts.Receipt", null)
                        .WithMany()
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Models.Owners.Owner", b =>
                {
                    b.Navigation("Methods");
                });

            modelBuilder.Entity("Api.Models.Receipts.Receipt", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Api.Models.Splits.SplitResult", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Api.Models.Splits.SplitSession", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
