// <auto-generated />
using System;
using Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(LightningDbContext))]
    [Migration("20250903120623_ReconciliationMetaData")]
    partial class ReconciliationMetaData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Models.Receipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("BaselineSubtotal")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("BlobContainer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BlobName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal?>("ComputedItemsSubtotal")
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal?>("Discrepancy")
                        .HasColumnType("numeric(12,2)");

                    b.Property<bool>("NeedsReview")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("OriginalFileUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("text");

                    b.Property<string>("ParseError")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("RawText")
                        .HasMaxLength(100000)
                        .HasColumnType("character varying(100000)");

                    b.Property<string>("Reason")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<decimal?>("SubTotal")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Tip")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Total")
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("now()");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("NeedsReview");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("Status");

                    b.HasIndex("Status", "CreatedAt");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("Api.Models.ReceiptItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric(12,2)");

                    b.Property<bool>("IsSystemGenerated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("LineSubtotal")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<decimal>("Qty")
                        .HasColumnType("numeric(9,3)");

                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Unit")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("now()");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("ReceiptId", "Position");

                    b.ToTable("ReceiptItems");
                });

            modelBuilder.Entity("Api.Models.ReceiptItem", b =>
                {
                    b.HasOne("Api.Models.Receipt", "Receipt")
                        .WithMany("Items")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("Api.Models.Receipt", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
